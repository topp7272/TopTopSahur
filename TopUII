-- Topp UI Library (Clean Version)
local ToppUI = {}
ToppUI.__index = ToppUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Default theme configuration
local DefaultTheme = {
    MainColor = Color3.fromRGB(40, 40, 40),
    SecondaryColor = Color3.fromRGB(30, 30, 30),
    AccentColor = Color3.fromRGB(0, 120, 215),
    TextColor = Color3.fromRGB(255, 255, 255),
    DisabledColor = Color3.fromRGB(100, 100, 100),
    DragAreaHeight = 30,
    CornerRadius = UDim.new(0, 6),
    Font = Enum.Font.Gotham,
    TitleFont = Enum.Font.GothamBold,
    TextSize = 14,
    TitleSize = 18
}

-- Create a new Topp UI instance
function ToppUI.new(themeConfig)
    local self = setmetatable({}, ToppUI)
    
    -- Merge custom theme with defaults
    self.Theme = table.clone(DefaultTheme)
    if themeConfig then
        for k, v in pairs(themeConfig) do
            self.Theme[k] = v
        end
    end
    
    -- Create the main UI container
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "ToppUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    self.ScreenGui.Parent = game:GetService("CoreGui")
    
    -- Store windows
    self.Windows = {}
    
    -- Initialize drag manager
    self.Dragging = nil
    self.DragInput = nil
    self.DragStart = nil
    self.DragStartPos = nil
    
    -- Set up input connections
    self:InitializeInput()
    
    return self
end

-- Initialize input handling for dragging
function ToppUI:InitializeInput()
    self.InputBegan = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDragStart(input)
        end
    end)
    
    self.InputChanged = UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDrag(input)
        end
    end)
    
    self.InputEnded = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDragEnd(input)
        end
    end)
end

-- Handle drag start (when touching the title bar)
function ToppUI:HandleDragStart(input)
    if self.Dragging then return end
    
    local gui = input.UserInputState == Enum.UserInputState.Begin and self:GetTopWindowAtPosition(input.Position)
    if gui then
        local titleBar = gui:FindFirstChild("TitleBar")
        if titleBar and self:IsMouseOverElement(titleBar, input.Position) then
            -- Start window drag
            self.Dragging = gui
            self.DragInput = input
            self.DragStart = input.Position
            self.DragStartPos = gui.AbsolutePosition
            
            -- Bring to front
            self:BringToFront(gui)
        end
    end
end

-- Handle drag movement
function ToppUI:HandleDrag(input)
    if not self.Dragging or not self.DragInput or input ~= self.DragInput then return end
    
    local delta = input.Position - self.DragStart
    local newPos = self.DragStartPos + delta
    self.Dragging.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
end

-- Handle drag end
function ToppUI:HandleDragEnd(input)
    if input == self.DragInput then
        self.Dragging = nil
        self.DragInput = nil
        self.DragStart = nil
        self.DragStartPos = nil
    end
end

-- Check if mouse is over a GUI element
function ToppUI:IsMouseOverElement(element, position)
    local absPos = element.AbsolutePosition
    local absSize = element.AbsoluteSize
    return position.X >= absPos.X and position.X <= absPos.X + absSize.X and
           position.Y >= absPos.Y and position.Y <= absPos.Y + absSize.Y
end

-- Get the topmost window at a position
function ToppUI:GetTopWindowAtPosition(position)
    for i = #self.Windows, 1, -1 do
        local window = self.Windows[i]
        if window.Visible and self:IsMouseOverElement(window, position) then
            return window
        end
    end
    return nil
end

-- Bring a window to the front
function ToppUI:BringToFront(window)
    for i, w in ipairs(self.Windows) do
        if w == window then
            table.remove(self.Windows, i)
            table.insert(self.Windows, w)
            w.ZIndex = #self.Windows + 10
            break
        end
    end
end

-- Create a button element
function ToppUI:CreateButton(parent, options)
    options = options or {}
    
    local button = Instance.new("TextButton")
    button.Name = options.Name or "Button"
    button.BackgroundColor3 = self.Theme.AccentColor
    button.TextColor3 = self.Theme.TextColor
    button.Text = options.Name or "Button"
    button.Font = self.Theme.Font
    button.TextSize = self.Theme.TextSize
    button.Size = UDim2.new(1, -10, 0, 30)
    button.Position = UDim2.new(0, 5, 0, 0)
    button.AutoButtonColor = false
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = button
    
    -- Hover effects
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(
            math.floor(self.Theme.AccentColor.R * 255 * 0.9),
            math.floor(self.Theme.AccentColor.G * 255 * 0.9),
            math.floor(self.Theme.AccentColor.B * 255 * 0.9)
        )}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = self.Theme.AccentColor}):Play()
    end)
    
    button.MouseButton1Down:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(
            math.floor(self.Theme.AccentColor.R * 255 * 0.8),
            math.floor(self.Theme.AccentColor.G * 255 * 0.8),
            math.floor(self.Theme.AccentColor.B * 255 * 0.8)
        )}):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = self.Theme.AccentColor}):Play()
    end)
    
    -- Click functionality
    if options.Callback then
        button.MouseButton1Click:Connect(function()
            options.Callback()
        end)
    end
    
    return button
end

-- Create a toggle element
function ToppUI:CreateToggle(parent, options)
    options = options or {}
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = options.Name or "Toggle"
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Size = UDim2.new(1, -10, 0, 30)
    toggleFrame.Position = UDim2.new(0, 5, 0, 0)
    toggleFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.TextColor3 = self.Theme.TextColor
    label.Text = options.Name or "Toggle"
    label.Font = self.Theme.Font
    label.TextSize = self.Theme.TextSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Size = UDim2.new(1, -40, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Parent = toggleFrame
    
    local toggleOuter = Instance.new("Frame")
    toggleOuter.Name = "ToggleOuter"
    toggleOuter.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggleOuter.Size = UDim2.new(0, 40, 0, 20)
    toggleOuter.Position = UDim2.new(1, -40, 0.5, -10)
    toggleOuter.Parent = toggleFrame
    
    local outerCorner = Instance.new("UICorner")
    outerCorner.CornerRadius = UDim.new(0, 10)
    outerCorner.Parent = toggleOuter
    
    local toggleInner = Instance.new("Frame")
    toggleInner.Name = "ToggleInner"
    toggleInner.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    toggleInner.Size = UDim2.new(0, 16, 0, 16)
    toggleInner.Position = UDim2.new(0, 2, 0, 2)
    toggleInner.Parent = toggleOuter
    
    local innerCorner = Instance.new("UICorner")
    innerCorner.CornerRadius = UDim.new(0, 8)
    innerCorner.Parent = toggleInner
    
    local currentValue = options.CurrentValue or false
    
    local function updateToggle()
        if currentValue then
            game:GetService("TweenService"):Create(toggleInner, TweenInfo.new(0.1), {
                Position = UDim2.new(1, -18, 0, 2),
                BackgroundColor3 = self.Theme.AccentColor
            }):Play()
            game:GetService("TweenService"):Create(toggleOuter, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(
                    math.floor(self.Theme.AccentColor.R * 255 * 0.5),
                    math.floor(self.Theme.AccentColor.G * 255 * 0.5),
                    math.floor(self.Theme.AccentColor.B * 255 * 0.5)
                )
            }):Play()
        else
            game:GetService("TweenService"):Create(toggleInner, TweenInfo.new(0.1), {
                Position = UDim2.new(0, 2, 0, 2),
                BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            }):Play()
            game:GetService("TweenService"):Create(toggleOuter, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            }):Play()
        end
    end
    
    updateToggle()
    
    -- Click functionality
    toggleOuter.MouseButton1Click:Connect(function()
        currentValue = not currentValue
        updateToggle()
        if options.Callback then
            options.Callback(currentValue)
        end
    end)
    
    return {
        SetValue = function(self, value)
            currentValue = value
            updateToggle()
        end,
        GetValue = function(self)
            return currentValue
        end
    }
end

-- Create a new window
function ToppUI:CreateWindow(options)
    options = options or {}
    
    local windowName = options.Name or "Topp UI"
    local windowSize = options.Size or UDim2.new(0, 500, 0, 400)
    
    -- Create window frame
    local window = Instance.new("Frame")
    window.Name = windowName
    window.BackgroundColor3 = self.Theme.MainColor
    window.BorderSizePixel = 0
    window.Position = UDim2.new(0.5, -windowSize.X.Offset/2, 0.5, -windowSize.Y.Offset/2)
    window.Size = windowSize
    window.ZIndex = #self.Windows + 10
    window.ClipsDescendants = true
    
    -- Apply corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = window
    
    -- Create title bar (draggable area)
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.BackgroundColor3 = self.Theme.SecondaryColor
    titleBar.BorderSizePixel = 0
    titleBar.Size = UDim2.new(1, 0, 0, self.Theme.DragAreaHeight)
    titleBar.ZIndex = window.ZIndex + 1
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 6)
    titleCorner.Parent = titleBar
    
    -- Window title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 10, 0, 0)
    title.Size = UDim2.new(1, -40, 1, 0)
    title.Font = self.Theme.TitleFont
    title.Text = windowName
    title.TextColor3 = self.Theme.TextColor
    title.TextSize = self.Theme.TitleSize
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = titleBar.ZIndex + 1
    title.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.BackgroundTransparency = 1
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Size = UDim2.new(0, 30, 0, self.Theme.DragAreaHeight)
    closeButton.Font = self.Theme.Font
    closeButton.Text = "X"
    closeButton.TextColor3 = self.Theme.TextColor
    closeButton.TextSize = self.Theme.TitleSize
    closeButton.ZIndex = titleBar.ZIndex + 1
    closeButton.Parent = titleBar
    
    -- Create content frame
    local content = Instance.new("ScrollingFrame")
    content.Name = "Content"
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.Position = UDim2.new(0, 0, 0, self.Theme.DragAreaHeight)
    content.Size = UDim2.new(1, 0, 1, -self.Theme.DragAreaHeight)
    content.ScrollBarThickness = 5
    content.ScrollBarImageColor3 = self.Theme.AccentColor
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.CanvasSize = UDim2.new(0, 0, 0, 0)
    content.ZIndex = window.ZIndex + 1
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Name = "ContentLayout"
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Parent = content
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.Name = "ContentPadding"
    contentPadding.PaddingTop = UDim.new(0, 5)
    contentPadding.PaddingLeft = UDim.new(0, 5)
    contentPadding.PaddingRight = UDim.new(0, 5)
    contentPadding.Parent = content
    
    -- Assemble window
    titleBar.Parent = window
    content.Parent = window
    window.Parent = self.ScreenGui
    
    -- Add to windows list
    table.insert(self.Windows, window)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        window.Visible = false
    end)
    
    -- Window API
    local windowAPI = {}
    
    function windowAPI:Toggle()
        window.Visible = not window.Visible
        if window.Visible then
            self:BringToFront(window)
        end
    end
    
    function windowAPI:SetTitle(newTitle)
        title.Text = newTitle
    end
    
    function windowAPI:CreateButton(options)
        return ToppUI.CreateButton(self, content, options)
    end
    
    function windowAPI:CreateToggle(options)
        return ToppUI.CreateToggle(self, content, options)
    end
    
    function windowAPI:CreateLabel(options)
        local label = Instance.new("TextLabel")
        label.Name = options.Name or "Label"
        label.BackgroundTransparency = 1
        label.TextColor3 = self.Theme.TextColor
        label.Text = options.Text or ""
        label.Font = self.Theme.Font
        label.TextSize = self.Theme.TextSize
        label.TextXAlignment = options.Alignment or Enum.TextXAlignment.Left
        label.Size = UDim2.new(1, -10, 0, 20)
        label.Parent = content
        
        return label
    end
    
    function windowAPI:CreateTab(tabName)
        -- For simplicity, we'll just create a section
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Name = tabName
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.Size = UDim2.new(1, 0, 0, 0)
        sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
        sectionFrame.Parent = content
        
        local sectionLayout = Instance.new("UIListLayout")
        sectionLayout.Name = "SectionLayout"
        sectionLayout.Padding = UDim.new(0, 5)
        sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        sectionLayout.Parent = sectionFrame
        
        local sectionAPI = {}
        
        function sectionAPI:CreateButton(options)
            return ToppUI.CreateButton(self, sectionFrame, options)
        end
        
        function sectionAPI:CreateToggle(options)
            return ToppUI.CreateToggle(self, sectionFrame, options)
        end
        
        function sectionAPI:CreateLabel(options)
            local label = Instance.new("TextLabel")
            label.Name = options.Name or "Label"
            label.BackgroundTransparency = 1
            label.TextColor3 = self.Theme.TextColor
            label.Text = options.Text or ""
            label.Font = self.Theme.Font
            label.TextSize = self.Theme.TextSize
            label.TextXAlignment = options.Alignment or Enum.TextXAlignment.Left
            label.Size = UDim2.new(1, -10, 0, 20)
            label.Parent = sectionFrame
            
            return label
        end
        
        return sectionAPI
    end
    
    function windowAPI:Destroy()
        window:Destroy()
        for i, w in ipairs(self.Windows) do
            if w == window then
                table.remove(self.Windows, i)
                break
            end
        end
    end
    
    return windowAPI
end

-- Cleanup
function ToppUI:Destroy()
    self.ScreenGui:Destroy()
    if self.InputBegan then self.InputBegan:Disconnect() end
    if self.InputChanged then self.InputChanged:Disconnect() end
    if self.InputEnded then self.InputEnded:Disconnect() end
end
         
