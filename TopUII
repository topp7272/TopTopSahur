--[[
    Topp UI Library
    A customizable UI library with draggable windows
]]

local ToppUI = {}
ToppUI.__index = ToppUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Default theme configuration
local DefaultTheme = {
    MainColor = Color3.fromRGB(40, 40, 40),
    SecondaryColor = Color3.fromRGB(30, 30, 30),
    AccentColor = Color3.fromRGB(0, 120, 215),
    TextColor = Color3.fromRGB(255, 255, 255),
    DisabledColor = Color3.fromRGB(100, 100, 100),
    DragAreaHeight = 30, -- Height of the draggable title bar
}

-- Create a new Topp UI instance
function ToppUI.new(themeConfig)
    local self = setmetatable({}, ToppUI)
    
    -- Merge custom theme with defaults
    self.Theme = table.clone(DefaultTheme)
    if themeConfig then
        for k, v in pairs(themeConfig) do
            self.Theme[k] = v
        end
    end
    
    -- Create the main UI container
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "ToppUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    self.ScreenGui.Parent = game:GetService("CoreGui")
    
    -- Store windows
    self.Windows = {}
    
    -- Initialize drag manager
    self.Dragging = nil
    self.DragInput = nil
    self.DragStart = nil
    self.DragStartPos = nil
    
    -- Set up input connections
    self:InitializeInput()
    
    return self
end

-- Initialize input handling for dragging
function ToppUI:InitializeInput()
    self.InputBegan = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDragStart(input)
        end
    end)
    
    self.InputChanged = UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDrag(input)
        end
    end)
    
    self.InputEnded = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self:HandleDragEnd(input)
        end
    end)
end

-- Handle drag start (when touching the title bar)
function ToppUI:HandleDragStart(input)
    if self.Dragging then return end
    
    local gui = input.UserInputState == Enum.UserInputState.Begin and self:GetTopWindowAtPosition(input.Position)
    if gui then
        local titleBar = gui:FindFirstChild("TitleBar")
        if titleBar and self:IsMouseOverElement(titleBar, input.Position) then
            -- Start window drag
            self.Dragging = gui
            self.DragInput = input
            self.DragStart = input.Position
            self.DragStartPos = gui.AbsolutePosition
            
            -- Bring to front
            self:BringToFront(gui)
        end
    end
end

-- Handle drag movement
function ToppUI:HandleDrag(input)
    if not self.Dragging or not self.DragInput or input ~= self.DragInput then return end
    
    local delta = input.Position - self.dragStart
    local newPos = self.DragStartPos + delta
    self.Dragging.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
end

-- Handle drag end
function ToppUI:HandleDragEnd(input)
    if input == self.DragInput then
        self.Dragging = nil
        self.DragInput = nil
        self.DragStart = nil
        self.DragStartPos = nil
    end
end

-- Check if mouse is over a GUI element
function ToppUI:IsMouseOverElement(element, position)
    local absPos = element.AbsolutePosition
    local absSize = element.AbsoluteSize
    return position.X >= absPos.X and position.X <= absPos.X + absSize.X and
           position.Y >= absPos.Y and position.Y <= absPos.Y + absSize.Y
end

-- Get the topmost window at a position
function ToppUI:GetTopWindowAtPosition(position)
    for i = #self.Windows, 1, -1 do
        local window = self.Windows[i]
        if window.Visible and self:IsMouseOverElement(window, position) then
            return window
        end
    end
    return nil
end

-- Bring a window to the front
function ToppUI:BringToFront(window)
    for i, w in ipairs(self.Windows) do
        if w == window then
            table.remove(self.Windows, i)
            table.insert(self.Windows, w)
            w.ZIndex = #self.Windows + 10
            break
        end
    end
end

-- Create a new window
function ToppUI:CreateWindow(options)
    options = options or {}
    
    local windowName = options.Name or "Topp UI" -- Changed default name to just "Topp UI"
    local windowSize = options.Size or UDim2.new(0, 500, 0, 400)
    
    -- Create window frame
    local window = Instance.new("Frame")
    window.Name = windowName
    window.BackgroundColor3 = self.Theme.MainColor
    window.BorderSizePixel = 0
    window.Position = UDim2.new(0.5, -windowSize.X.Offset/2, 0.5, -windowSize.Y.Offset/2)
    window.Size = windowSize
    window.ZIndex = #self.Windows + 10
    window.ClipsDescendants = true
    
    -- Apply corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = window
    
    -- Create title bar (draggable area)
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.BackgroundColor3 = self.Theme.SecondaryColor
    titleBar.BorderSizePixel = 0
    titleBar.Size = UDim2.new(1, 0, 0, self.Theme.DragAreaHeight)
    titleBar.ZIndex = window.ZIndex + 1
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 6)
    titleCorner.Parent = titleBar
    
    -- Window title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 10, 0, 0)
    title.Size = UDim2.new(1, -10, 1, 0)
    title.Font = Enum.Font.GothamBold
    title.Text = windowName
    title.TextColor3 = self.Theme.TextColor
    title.TextSize = 18
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = titleBar.ZIndex + 1
    title.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.BackgroundTransparency = 1
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Size = UDim2.new(0, 30, 0, self.Theme.DragAreaHeight)
    closeButton.Font = Enum.Font.Gotham
    closeButton.Text = "X"
    closeButton.TextColor3 = self.Theme.TextColor
    closeButton.TextSize = 18
    closeButton.ZIndex = titleBar.ZIndex + 1
    closeButton.Parent = titleBar
    
    -- Create content frame
    local content = Instance.new("ScrollingFrame")
    content.Name = "Content"
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.Position = UDim2.new(0, 0, 0, self.Theme.DragAreaHeight)
    content.Size = UDim2.new(1, 0, 1, -self.Theme.DragAreaHeight)
    content.ScrollBarThickness = 5
    content.ScrollBarImageColor3 = self.Theme.AccentColor
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.CanvasSize = UDim2.new(0, 0, 0, 0)
    content.ZIndex = window.ZIndex + 1
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Name = "ContentLayout"
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Parent = content
    
    -- Assemble window
    titleBar.Parent = window
    content.Parent = window
    window.Parent = self.ScreenGui
    
    -- Add to windows list
    table.insert(self.Windows, window)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        window.Visible = false
    end)
    
    -- Window API
    local windowAPI = {}
    
    function windowAPI:Toggle()
        window.Visible = not window.Visible
        if window.Visible then
            self:BringToFront(window)
        end
    end
    
    function windowAPI:SetTitle(newTitle)
        title.Text = newTitle
    end
    
    function windowAPI:Destroy()
        window:Destroy()
        for i, w in ipairs(self.Windows) do
            if w == window then
                table.remove(self.Windows, i)
                break
            end
        end
    end
    
    return windowAPI
end

-- Example usage:
local UI = ToppUI.new({
    MainColor = Color3.fromRGB(30, 30, 40),
    AccentColor = Color3.fromRGB(0, 150, 255)
})

-- This will create a window titled "Topp UI" (the default)
local mainWindow = UI:CreateWindow()

return ToppUI
